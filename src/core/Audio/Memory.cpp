#include "Memory.h"
#include "Timer.h"


namespace Audio
{


static const std::array<uint8_t, 64> bootRom = {
    0xCD, 0xEF, 0xBD, 0xE8, 0x00, 0xC6, 0x1D, 0xD0,
    0xFC, 0x8F, 0xAA, 0xF4, 0x8F, 0xBB, 0xF5, 0x78,
    0xCC, 0xF4, 0xD0, 0xFB, 0x2F, 0x19, 0xEB, 0xF4,
    0xD0, 0xFC, 0x7E, 0xF4, 0xD0, 0x0B, 0xE4, 0xF5,
    0xCB, 0xF4, 0xD7, 0x00, 0xFC, 0xD0, 0xF3, 0xAB,
    0x01, 0x10, 0xEF, 0x7E, 0xF4, 0x10, 0xEB, 0xBA,
    0xF6, 0xDA, 0x00, 0xBA, 0xF4, 0xC4, 0xF4, 0xDD,
    0x5D, 0xD0, 0xDB, 0x1F, 0x00, 0x00, 0xC0, 0xFF
};

enum IoRegisters
{
    eRegTEST = 0x00F0,
    eRegCONTROL = 0x00F1,
    eRegDSPADDR = 0x00F2,
    eRegDSPDATA = 0x00F3,
    eRegCPUIO0 = 0x00F4,
    eRegCPUIO1 = 0x00F5,
    eRegCPUIO2 = 0x00F6,
    eRegCPUIO3 = 0x00F7,
    eRegAUXIO4 = 0x00F8,
    eRegAUXIO5 = 0x00F9,
    eRegT0DIV = 0x00FA,
    eRegT1DIV = 0x00FB,
    eRegT2DIV = 0x00FC,
    eRegT0OUT = 0x00FD,
    eRegT1OUT = 0x00FE,
    eRegT2OUT = 0x00FF
};


Memory::Memory()
{
    ram[eRegCONTROL] = 0x80;
}


Memory::~Memory()
{

}


uint8_t Memory::Read8Bit(uint16_t addr)
{
    timer->AddCycle();

    if ((addr & 0xFFC0) == 0xFFC0 && Bytes::TestBit<7>(ram[eRegCONTROL]))
    {
        return bootRom[addr & 0x3F];
    }

    return ram[addr];
}


void Memory::Write8Bit(uint16_t addr, uint8_t value)
{
    timer->AddCycle();

    ram[addr] = value;
}


void Memory::ClearMemory()
{
    ram.fill(0);
}


}